/*
 AngularJS PDF viewer directive using pdf.js.

 https://github.com/akrennmair/ng-pdfviewer 

 MIT license
*/
angular.module("ngPDFViewer",[]).directive("pdfviewer",["$log","$q","$timeout",function(d,h,g){var f=[],k=null;return{restrict:"E",template:"",scope:{onPageLoad:"&",loadProgress:"&",src:"@",pagesToShow:"@",scale:"@",id:"="},controller:["$scope",function(a){a.pageNum=1;a.pdfDoc=null;a.renderInProgress=!1;a.forceReRender=!0;a.documentProgress=function(b){a.loadProgress&&a.loadProgress({state:"loading",loaded:b.loaded,total:b.total})};a.setScale=function(b){angular.isNumber(b)&&(a.scale=b,a.forceReRender=
!0)};a.renderDocument=function(){d.debug("Render Document");angular.forEach(f,function(b,c){0==c&&(a.renderInProgress=!0);var e=c+a.pageNum;a.renderPage(e,b,function(b){d.debug("Rendered Page <"+e+"> SUCCESS <"+b+">");e==f.length&&(a.renderInProgress=!1,a.forceReRender=!1)})})};a.loadPDF=function(b){d.debug("loadPDF <"+b+">");var c=h.defer();PDFJS.getDocument(b,null,null,a.documentProgress).then(function(b){d.debug("Document read");a.pdfDoc=b;a.loadProgress&&a.loadProgress({state:"finished",loaded:0,
total:0});c.resolve(a.pdfDoc)},function(b,l){d.debug("PDF load error: "+b+" <"+l+"> ");c.reject(b);a.loadProgress&&a.loadProgress({state:"error",loaded:0,total:0})});return c.promise};a.renderPage=function(b,c,e){d.debug("renderPage #"+b);c.getAttribute("rendered")!=b||a.forceReRender?a.pdfDoc.getPage(b).then(function(l){var m=l.getViewport(1),n=c.getContext("2d"),m=l.getViewport(a.containerWidth/m.width);c.height=m.height;c.width=m.width;l.render({canvasContext:n,viewport:m}).then(function(){c.setAttribute("rendered",
b);e&&e(!0);a.$apply(function(){a.onPageLoad({page:b,total:a.pdfDoc.numPages})})},function(){e&&e(!1);d.debug("page.render failed")})}):(d.debug("Skipping page <"+b+">"),e&&e(!0))};a.$on("pdfviewer.setScale",function(b,c,d){c===k&&(a.setScale(d),a.renderDocument())});a.$on("pdfviewer.nextPage",function(b,c){c===k&&a.pageNum<a.pdfDoc.numPages&&(a.pageNum++,a.renderDocument())});a.$on("pdfviewer.prevPage",function(b,c){c===k&&1<a.pageNum&&(a.pageNum--,a.renderDocument())});a.$on("pdfviewer.gotoPage",
function(b,c,d){c===k&&1<=d&&d<=a.pdfDoc.numPages&&(a.pageNum=d,a.renderDocument())})}],link:function(a,b,c){k=c.id;var e=function(){a.containerWidth=b.parent()[0].offsetWidth-45;a.containerHeight=b.parent()[0].clientHeight;d.debug("setContainerSize "+a.containerWidth)};g(e).then(function(){var b;window.onresize=function(){b&&g.cancel(b);b=g(function(){e();a.renderDocument()},100)}});createCanvas=function(a,b){f=a.find("canvas");if(f.length>b)for(var d=b;d<f.length;d++)angular.element(f[d]).remove();
else for(d=f.length;d<b;d++){var c=angular.element("<canvas>");c[0].setAttribute("id","page"+(d+1));a.append(c)}f=a.find("canvas")};c.$observe("src",function(c){d.debug("src attribute changed, new value is <"+c+">");void 0!==c&&null!==c&&""!==c&&(a.pageNum=1,a.loadPDF(a.src).then(function(c){d.debug("PDF Loaded");a.pagesToShow=0==a.pagesToShow?a.pdfDoc.numPages:a.pagesToShow;createCanvas(b,a.pagesToShow);a.renderDocument()},function(a){d.debug(a)}))});c.$observe("pagesToShow",function(c){null!=a.pdfDoc&&
!a.renderInProgress&&angular.isNumber(parseInt(c))&&(d.debug("pages-to-show attribute changed, new value is <"+c+">"),a.pagesToShow=0==a.pagesToShow?a.pdfDoc.numPages:a.pagesToShow,createCanvas(b,a.pagesToShow),a.renderDocument())});c.$observe("scale",function(b){null!=a.pdfDoc&&!a.renderInProgress&&angular.isNumber(parseInt(b))&&($scope.forceReRender=!0,d.debug("scale attribute changed, new value is <"+b+">"),a.renderDocument())})}}}]).service("PDFViewerService",["$rootScope",function(d){return{nextPage:function(){d.$broadcast("pdfviewer.nextPage")},
prevPage:function(){d.$broadcast("pdfviewer.prevPage")},Instance:function(h){return{prevPage:function(){d.$broadcast("pdfviewer.prevPage",h)},nextPage:function(){d.$broadcast("pdfviewer.nextPage",h)},gotoPage:function(g){d.$broadcast("pdfviewer.gotoPage",h,g)},setScale:function(g){d.$broadcast("pdfviewer.setScale",h,g)}}}}}]);
//@ sourceMappingURL=dist/ng-pdfviewer.min.map
